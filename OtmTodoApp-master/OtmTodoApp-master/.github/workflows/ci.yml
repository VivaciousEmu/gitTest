name: CI Pipeline

on: 
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Build with Maven
        run: mvn clean compile
        
      - name: Run Tests
        run: mvn test
        
      - name: Generate Coverage Report
        run: mvn jacoco:report
        
      - name: Package Application
        run: mvn package
        
      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: target/surefire-reports/
          
      - name: Upload Coverage Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-reports
          path: target/site/jacoco/
          
      - name: Upload JAR Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-artifacts
          path: target/*.jar
          
      - name: Comment PR with Test Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read test results if available
            let testSummary = '## üß™ Test Results\n\n';
            try {
              const surefireDir = 'target/surefire-reports';
              if (fs.existsSync(surefireDir)) {
                const files = fs.readdirSync(surefireDir).filter(f => f.endsWith('.txt'));
                if (files.length > 0) {
                  testSummary += '‚úÖ All tests passed successfully!\n\n';
                  testSummary += '**Test Summary:**\n';
                  files.forEach(file => {
                    const content = fs.readFileSync(path.join(surefireDir, file), 'utf8');
                    const lines = content.split('\n');
                    const testCount = lines.filter(line => line.includes('Tests run:')).length;
                    if (testCount > 0) {
                      testSummary += `- ${file.replace('.txt', '')}: ${lines.find(line => line.includes('Tests run:'))}\n`;
                    }
                  });
                }
              }
            } catch (error) {
              testSummary += '‚ö†Ô∏è Could not read test results\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: testSummary
            });
